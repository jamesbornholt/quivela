
# parser_table.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left&|nonassoc=nonassoc<>EQleft+-left*/rightUNARYleft.[IDENT NUMBER EQ COMMENT VERBATIM NEW IF ELSE ASSERT ASSUMEtoplevel : toplevel_expression_listtoplevel_expression_list : toplevel_expression toplevel_expression_list\n                                | toplevel_expression ";" toplevel_expression_list\n                                | expression_list : expression_list expression\n                       | expression_list ";" expression\n                       | expression\n                       | expression_list expression ";"\n                       | expression_list ";" expression ";"\n                       | expression ";"\n                       | toplevel_expression : expressiontoplevel_expression : proofproof : proof_term \'~\' proof_rest\n             | proof_term \'~\' \'[\' proof_annotation \']\' proof_rest\n             | proof_term \'~\' \'[\' proof_annotation \']\' VERBATIM proof_restproof_term : expressionproof_rest : proof_term \'~\' proof_rest\n                  | proof_term \'~\' \'[\' proof_annotation \']\' proof_rest\n                  | proof_term \'~\' \'[\' proof_annotation \']\' VERBATIM proof_rest\n                  | proof_termtoplevel_expression : ASSERT expressiontoplevel_expression : ASSUME proofproof_annotation : expressionexpression : lvalue "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'<\' expression\n                  | expression \'>\' expression\n                  | expression EQ  expression\n                  | expression \'&\' expression\n                  | expression \'|\' expressionexpression : \'-\' expression  %prec UNARY\n                  | \'+\' expression  %prec UNARY\n                  | \'!\' expression  %prec UNARYarg : expression\n           | IDENT \':\' typetype : \'*\'\n            | \'<\' type type_trailertype_trailer : \',\' type type_trailer\n                    | \'>\'arglist : arg \',\' arglist\n               | arg\n               | expression : \'<\' expression tuple_resttuple_rest : \',\' expression tuple_rest\n                  | \'>\'expression : \'(\' expression \')\'expression : lvalueexpression : methoddecl_or_callexpression : NUMBERlvalue : IDENT\n              | expression \'.\' IDENT lvalue_trailer\n              | expression \'[\' expression \']\' lvalue_trailerlvalue_trailer : \'.\' IDENT lvalue_trailer\n                      | \'[\' expression \']\' lvalue_trailer\n                      | \'(\' arglist \')\' lvalue_trailer\n                      | methoddecl_or_call : IDENT \'(\' arglist \')\'expression : new_allocexpression : methodnew_alloc : NEW \'(\' locallist \')\' \'{\' expression_list \'}\'locallist : local \',\' locallist\n                 | local\n                 | local : IDENT \'=\' expression\n             | IDENT method : methoddecl_or_call \'{\' expression_list \'}\'expression : IF expression \'{\' expression_list \'}\'\n                  | IF expression \'{\' expression_list \'}\' ELSE \'{\' expression_list \'}\''
    
_lr_action_items = {'$end':([0,1,2,3,4,5,8,14,15,16,17,20,22,23,35,36,37,39,40,42,49,50,51,52,53,54,55,56,57,58,59,61,62,63,65,69,70,80,83,85,94,99,102,103,106,107,117,118,119,123,127,128,131,135,137,140,141,],[-4,0,-1,-4,-12,-13,-51,-52,-53,-62,-63,-54,-2,-4,-22,-23,-17,-36,-35,-37,-3,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-21,-14,-55,-60,-70,-61,-60,-56,-48,-71,-18,-57,-60,-60,-15,-58,-59,-16,-64,-19,-72,-20,]),'ASSERT':([0,3,4,5,8,14,15,16,17,20,23,35,36,37,39,40,42,50,51,52,53,54,55,56,57,58,59,61,62,63,65,69,70,80,83,85,94,99,102,103,106,107,117,118,119,123,127,128,131,135,137,140,141,],[6,6,-12,-13,-51,-52,-53,-62,-63,-54,6,-22,-23,-17,-36,-35,-37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-21,-14,-55,-60,-70,-61,-60,-56,-48,-71,-18,-57,-60,-60,-15,-58,-59,-16,-64,-19,-72,-20,]),'ASSUME':([0,3,4,5,8,14,15,16,17,20,23,35,36,37,39,40,42,50,51,52,53,54,55,56,57,58,59,61,62,63,65,69,70,80,83,85,94,99,102,103,106,107,117,118,119,123,127,128,131,135,137,140,141,],[7,7,-12,-13,-51,-52,-53,-62,-63,-54,7,-22,-23,-17,-36,-35,-37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-21,-14,-55,-60,-70,-61,-60,-56,-48,-71,-18,-57,-60,-60,-15,-58,-59,-16,-64,-19,-72,-20,]),'-':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,81,82,83,84,85,86,87,88,89,90,92,94,95,98,99,100,102,103,104,105,106,107,108,109,114,116,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[10,10,25,-13,10,10,-51,10,10,10,10,10,-52,-53,-62,-63,10,-54,10,10,10,10,10,10,10,10,10,10,10,25,-23,25,10,-36,-35,25,-37,25,10,25,10,10,-26,-27,-28,-29,25,25,25,25,25,-60,25,25,-47,10,10,-50,10,25,10,-21,-14,10,-54,25,-55,10,10,-60,25,-70,25,10,-10,10,10,25,-61,10,10,-60,25,-56,-48,-8,25,-71,-18,10,10,10,25,-57,-60,-60,-9,-15,10,10,-58,-59,10,10,-16,-64,10,-19,10,-72,-20,]),'+':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,81,82,83,84,85,86,87,88,89,90,92,94,95,98,99,100,102,103,104,105,106,107,108,109,114,116,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[9,9,24,-13,9,9,-51,9,9,9,9,9,-52,-53,-62,-63,9,-54,9,9,9,9,9,9,9,9,9,9,9,24,-23,24,9,-36,-35,24,-37,24,9,24,9,9,-26,-27,-28,-29,24,24,24,24,24,-60,24,24,-47,9,9,-50,9,24,9,-21,-14,9,-54,24,-55,9,9,-60,24,-70,24,9,-10,9,9,24,-61,9,9,-60,24,-56,-48,-8,24,-71,-18,9,9,9,24,-57,-60,-60,-9,-15,9,9,-58,-59,9,9,-16,-64,9,-19,9,-72,-20,]),'!':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,44,46,47,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,80,81,82,83,85,86,87,88,89,90,94,95,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[12,12,-12,-13,12,12,-51,12,12,12,12,12,-52,-53,-62,-63,12,-54,12,12,12,12,12,12,12,12,12,12,12,-22,-23,-17,12,-36,-35,-37,12,12,12,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,12,-50,12,-7,12,-21,-14,12,-55,12,12,-60,-70,-5,12,-10,12,12,-61,12,12,-60,-56,-48,-8,-6,-71,-18,12,12,12,-57,-60,-60,-9,-15,12,12,-58,-59,12,12,-16,-64,12,-19,12,-72,-20,]),'<':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,98,99,100,102,103,104,105,106,107,108,109,112,114,116,117,118,119,120,123,124,126,127,128,129,130,131,133,135,136,137,138,140,141,],[11,11,28,-13,11,11,-51,11,11,11,11,11,-52,-53,-62,-63,11,-54,11,11,11,11,11,11,11,11,11,11,11,28,-23,28,11,-36,-35,28,-37,28,11,28,11,11,-26,-27,-28,-29,None,None,None,28,28,-60,28,28,-47,None,11,-50,11,28,11,-21,-14,11,-54,28,-55,11,11,-60,28,-70,28,11,-10,11,11,28,112,-61,11,11,-60,28,-56,-48,-8,28,-71,-18,11,11,112,11,28,-57,-60,-60,-9,-15,11,11,-58,-59,11,11,-16,112,-64,11,-19,11,-72,-20,]),'(':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,44,46,47,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,80,81,82,83,85,86,87,88,89,90,94,95,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[13,13,-12,-13,13,13,-51,13,13,13,13,13,-52,-53,-62,-63,13,47,48,13,13,13,13,13,13,13,13,13,13,13,-22,-23,-17,13,-36,-35,-37,13,13,13,-26,-27,-28,-29,-30,-31,-32,-33,-34,82,-25,-47,-49,13,-50,13,-7,13,-21,-14,13,47,-55,13,13,82,-70,-5,13,-10,13,13,-61,13,13,82,-56,-48,-8,-6,-71,-18,13,13,13,-57,82,82,-9,-15,13,13,-58,-59,13,13,-16,-64,13,-19,13,-72,-20,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,44,46,47,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,80,81,82,83,85,86,87,88,89,90,94,95,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[15,15,-12,-13,15,15,-51,15,15,15,15,15,-52,-53,-62,-63,15,-54,15,15,15,15,15,15,15,15,15,15,15,-22,-23,-17,15,-36,-35,-37,15,15,15,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,15,-50,15,-7,15,-21,-14,15,-55,15,15,-60,-70,-5,15,-10,15,15,-61,15,15,-60,-56,-48,-8,-6,-71,-18,15,15,15,-57,-60,-60,-9,-15,15,15,-58,-59,15,15,-16,-64,15,-19,15,-72,-20,]),'IF':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,44,46,47,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,80,81,82,83,85,86,87,88,89,90,94,95,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[18,18,-12,-13,18,18,-51,18,18,18,18,18,-52,-53,-62,-63,18,-54,18,18,18,18,18,18,18,18,18,18,18,-22,-23,-17,18,-36,-35,-37,18,18,18,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,18,-50,18,-7,18,-21,-14,18,-55,18,18,-60,-70,-5,18,-10,18,18,-61,18,18,-60,-56,-48,-8,-6,-71,-18,18,18,18,-57,-60,-60,-9,-15,18,18,-58,-59,18,18,-16,-64,18,-19,18,-72,-20,]),'IDENT':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,44,46,47,48,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,79,80,81,82,83,85,86,87,88,89,90,94,95,97,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[20,20,-12,-13,20,20,-51,20,20,20,20,20,-52,-53,-62,-63,20,-54,20,20,20,20,20,20,20,20,20,20,59,20,-22,-23,-17,20,-36,-35,-37,20,20,72,78,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,20,-50,20,-7,20,-21,-14,20,99,-55,20,72,-60,-70,-5,20,-10,20,20,-61,72,78,20,-60,-56,-48,-8,-6,-71,-18,20,20,20,-57,-60,-60,-9,-15,20,20,-58,-59,20,20,-16,-64,20,-19,20,-72,-20,]),'NEW':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,42,44,46,47,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,80,81,82,83,85,86,87,88,89,90,94,95,98,99,102,103,104,105,106,107,108,109,114,117,118,119,120,123,124,126,127,128,129,130,131,135,136,137,138,140,141,],[21,21,-12,-13,21,21,-51,21,21,21,21,21,-52,-53,-62,-63,21,-54,21,21,21,21,21,21,21,21,21,21,21,-22,-23,-17,21,-36,-35,-37,21,21,21,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,21,-50,21,-7,21,-21,-14,21,-55,21,21,-60,-70,-5,21,-10,21,21,-61,21,21,-60,-56,-48,-8,-6,-71,-18,21,21,21,-57,-60,-60,-9,-15,21,21,-58,-59,21,21,-16,-64,21,-19,21,-72,-20,]),';':([3,4,5,8,14,15,16,17,20,35,36,37,39,40,42,44,50,51,52,53,54,55,56,57,58,59,61,62,63,65,66,67,68,69,70,80,83,85,86,88,89,94,99,102,103,104,105,106,107,114,117,118,119,120,123,126,127,128,129,131,135,136,137,140,141,],[23,-12,-13,-51,-52,-53,-62,-63,-54,-22,-23,-17,-36,-35,-37,-11,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,87,88,-11,-21,-14,-55,-60,-70,104,-10,87,-61,-60,-56,-48,-8,120,-71,-18,-11,-57,-60,-60,-9,-15,87,-58,-59,-11,-16,-64,87,-19,-72,-20,]),'*':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,93,94,99,100,102,103,105,106,112,116,117,118,119,127,128,133,135,140,],[26,-51,-52,-53,-62,-63,-54,26,26,-36,-35,26,-37,26,26,26,26,-28,-29,26,26,26,26,26,-60,26,26,-47,-49,-50,26,-54,26,-55,-60,26,-70,26,26,111,-61,-60,26,-56,-48,26,-71,111,26,-57,-60,-60,-58,-59,111,-64,-72,]),'/':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[27,-51,-52,-53,-62,-63,-54,27,27,-36,-35,27,-37,27,27,27,27,-28,-29,27,27,27,27,27,-60,27,27,-47,-49,-50,27,-54,27,-55,-60,27,-70,27,27,-61,-60,27,-56,-48,27,-71,27,-57,-60,-60,-58,-59,-64,-72,]),'>':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,111,116,117,118,119,125,127,128,132,134,135,139,140,142,],[29,-51,-52,-53,-62,-63,-54,29,29,-36,-35,63,-37,29,29,-26,-27,-28,-29,None,None,None,29,29,-60,29,29,-47,-49,-50,29,-54,29,-55,-60,63,-70,29,29,-61,-60,29,-56,-48,29,-71,-40,29,-57,-60,-60,134,-58,-59,-41,-43,-64,134,-72,-42,]),'EQ':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[30,-51,-52,-53,-62,-63,-54,30,30,-36,-35,30,-37,30,30,-26,-27,-28,-29,None,None,None,30,30,-60,30,30,-47,-49,-50,30,-54,30,-55,-60,30,-70,30,30,-61,-60,30,-56,-48,30,-71,30,-57,-60,-60,-58,-59,-64,-72,]),'&':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[31,-51,-52,-53,-62,-63,-54,31,31,-36,-35,31,-37,31,31,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,31,-25,-47,-49,-50,31,-54,31,-55,-60,31,-70,31,31,-61,-60,31,-56,-48,31,-71,31,-57,-60,-60,-58,-59,-64,-72,]),'|':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[32,-51,-52,-53,-62,-63,-54,32,32,-36,-35,32,-37,32,32,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,32,-25,-47,-49,-50,32,-54,32,-55,-60,32,-70,32,32,-61,-60,32,-56,-48,32,-71,32,-57,-60,-60,-58,-59,-64,-72,]),'.':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[33,-51,-52,-53,-62,-63,-54,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,79,33,33,-47,-49,-50,33,-54,33,-55,79,33,-70,33,33,-61,79,33,-56,-48,33,-71,33,-57,79,79,-58,-59,-64,-72,]),'[':([4,8,14,15,16,17,20,35,37,39,40,41,42,43,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,72,75,80,83,84,85,86,90,92,94,99,100,102,103,105,106,116,117,118,119,127,128,135,140,],[34,-51,-52,-53,-62,-63,-54,34,34,34,34,34,34,34,34,71,34,34,34,34,34,34,34,34,34,81,34,34,-47,-49,-50,34,-54,34,-55,81,34,-70,34,108,34,-61,81,34,-56,-48,34,-71,34,-57,81,81,-58,-59,-64,-72,]),'~':([4,8,14,15,16,17,19,20,37,39,40,42,50,51,52,53,54,55,56,57,58,59,61,62,63,65,69,80,83,85,94,99,102,103,106,117,118,119,127,128,135,140,],[-17,-51,-52,-53,-62,-63,46,-54,-17,-36,-35,-37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,90,-55,-60,-70,-61,-60,-56,-48,-71,-57,-60,-60,-58,-59,-64,-72,]),'=':([8,20,59,72,78,80,83,99,102,117,118,119,127,128,],[38,-54,-60,-54,98,-55,-60,-60,-56,-57,-60,-60,-58,-59,]),',':([8,14,15,16,17,20,39,40,41,42,50,51,52,53,54,55,56,57,58,59,61,62,63,65,72,74,75,77,78,80,83,84,85,94,99,102,103,106,110,111,116,117,118,119,125,127,128,132,134,135,139,140,142,],[-51,-52,-53,-62,-63,-54,-36,-35,64,-37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-54,95,-38,97,-69,-55,-60,64,-70,-61,-60,-56,-48,-71,-39,-40,-68,-57,-60,-60,133,-58,-59,-41,-43,-64,133,-72,-42,]),')':([8,14,15,16,17,20,39,40,42,43,47,48,50,51,52,53,54,55,56,57,58,59,61,62,63,65,72,73,74,75,76,77,78,80,82,83,85,94,95,97,99,101,102,103,106,110,111,113,115,116,117,118,119,127,128,132,134,135,140,142,],[-51,-52,-53,-62,-63,-54,-36,-35,-37,65,-46,-67,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-54,94,-45,-38,96,-66,-69,-55,-46,-60,-70,-61,-46,-67,-60,119,-56,-48,-71,-39,-40,-44,-65,-68,-57,-60,-60,-58,-59,-41,-43,-64,-72,-42,]),'{':([8,14,15,16,17,20,39,40,42,45,50,51,52,53,54,55,56,57,58,59,61,62,63,65,80,83,85,94,96,99,102,103,106,117,118,119,121,127,128,135,140,],[-51,44,-53,-62,-63,-54,-36,-35,-37,68,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,-55,-60,-70,-61,114,-60,-56,-48,-71,-57,-60,-60,129,-58,-59,-64,-72,]),']':([8,14,15,16,17,20,39,40,42,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,80,83,85,91,92,94,99,100,102,103,106,117,118,119,122,127,128,135,140,],[-51,-52,-53,-62,-63,-54,-36,-35,-37,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,83,-25,-47,-49,-50,-55,-60,-70,109,-24,-61,-60,118,-56,-48,-71,-57,-60,-60,130,-58,-59,-64,-72,]),'}':([8,14,15,16,17,20,39,40,42,44,50,51,52,53,54,55,56,57,58,59,61,62,63,65,66,67,68,80,83,85,86,88,89,94,99,102,103,104,105,106,114,117,118,119,120,126,127,128,129,135,136,140,],[-51,-52,-53,-62,-63,-54,-36,-35,-37,-11,-26,-27,-28,-29,-30,-31,-32,-33,-34,-60,-25,-47,-49,-50,85,-7,-11,-55,-60,-70,-5,-10,106,-61,-60,-56,-48,-8,-6,-71,-11,-57,-60,-60,-9,135,-58,-59,-11,-64,140,-72,]),':':([72,],[93,]),'ELSE':([106,],[121,]),'VERBATIM':([109,130,],[124,138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'toplevel':([0,],[1,]),'toplevel_expression_list':([0,3,23,],[2,22,49,]),'toplevel_expression':([0,3,23,],[3,3,3,]),'expression':([0,3,6,7,9,10,11,12,13,18,23,24,25,26,27,28,29,30,31,32,34,38,44,46,47,63,64,66,68,71,81,82,87,89,90,95,98,108,109,114,124,126,129,130,136,138,],[4,4,35,37,39,40,41,42,43,45,4,50,51,52,53,54,55,56,57,58,60,61,67,37,75,55,84,86,67,92,100,75,105,86,37,75,116,92,37,67,37,86,67,37,86,37,]),'proof':([0,3,7,23,],[5,5,36,5,]),'lvalue':([0,3,6,7,9,10,11,12,13,18,23,24,25,26,27,28,29,30,31,32,34,38,44,46,47,63,64,66,68,71,81,82,87,89,90,95,98,108,109,114,124,126,129,130,136,138,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'methoddecl_or_call':([0,3,6,7,9,10,11,12,13,18,23,24,25,26,27,28,29,30,31,32,34,38,44,46,47,63,64,66,68,71,81,82,87,89,90,95,98,108,109,114,124,126,129,130,136,138,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'new_alloc':([0,3,6,7,9,10,11,12,13,18,23,24,25,26,27,28,29,30,31,32,34,38,44,46,47,63,64,66,68,71,81,82,87,89,90,95,98,108,109,114,124,126,129,130,136,138,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'method':([0,3,6,7,9,10,11,12,13,18,23,24,25,26,27,28,29,30,31,32,34,38,44,46,47,63,64,66,68,71,81,82,87,89,90,95,98,108,109,114,124,126,129,130,136,138,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'proof_term':([0,3,7,23,46,90,109,124,130,138,],[19,19,19,19,69,69,69,69,69,69,]),'tuple_rest':([41,84,],[62,103,]),'expression_list':([44,68,114,129,],[66,89,126,136,]),'proof_rest':([46,90,109,124,130,138,],[70,107,123,131,137,141,]),'arglist':([47,82,95,],[73,101,113,]),'arg':([47,82,95,],[74,74,74,]),'locallist':([48,97,],[76,115,]),'local':([48,97,],[77,77,]),'lvalue_trailer':([59,83,99,118,119,],[80,102,117,127,128,]),'proof_annotation':([71,108,],[91,122,]),'type':([93,112,133,],[110,125,139,]),'type_trailer':([125,139,],[132,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevel","S'",1,None,None,None),
  ('toplevel -> toplevel_expression_list','toplevel',1,'p_toplevel','parser.py',119),
  ('toplevel_expression_list -> toplevel_expression toplevel_expression_list','toplevel_expression_list',2,'p_toplevel_expression_list','parser.py',123),
  ('toplevel_expression_list -> toplevel_expression ; toplevel_expression_list','toplevel_expression_list',3,'p_toplevel_expression_list','parser.py',124),
  ('toplevel_expression_list -> <empty>','toplevel_expression_list',0,'p_toplevel_expression_list','parser.py',125),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',136),
  ('expression_list -> expression_list ; expression','expression_list',3,'p_expression_list','parser.py',137),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',138),
  ('expression_list -> expression_list expression ;','expression_list',3,'p_expression_list','parser.py',139),
  ('expression_list -> expression_list ; expression ;','expression_list',4,'p_expression_list','parser.py',140),
  ('expression_list -> expression ;','expression_list',2,'p_expression_list','parser.py',141),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list','parser.py',142),
  ('toplevel_expression -> expression','toplevel_expression',1,'p_toplevel_expression_expr','parser.py',155),
  ('toplevel_expression -> proof','toplevel_expression',1,'p_toplevel_expression_proof','parser.py',159),
  ('proof -> proof_term ~ proof_rest','proof',3,'p_proof','parser.py',163),
  ('proof -> proof_term ~ [ proof_annotation ] proof_rest','proof',6,'p_proof','parser.py',164),
  ('proof -> proof_term ~ [ proof_annotation ] VERBATIM proof_rest','proof',7,'p_proof','parser.py',165),
  ('proof_term -> expression','proof_term',1,'p_proof_term','parser.py',174),
  ('proof_rest -> proof_term ~ proof_rest','proof_rest',3,'p_proof_rest','parser.py',178),
  ('proof_rest -> proof_term ~ [ proof_annotation ] proof_rest','proof_rest',6,'p_proof_rest','parser.py',179),
  ('proof_rest -> proof_term ~ [ proof_annotation ] VERBATIM proof_rest','proof_rest',7,'p_proof_rest','parser.py',180),
  ('proof_rest -> proof_term','proof_rest',1,'p_proof_rest','parser.py',181),
  ('toplevel_expression -> ASSERT expression','toplevel_expression',2,'p_toplevel_expression_assert','parser.py',192),
  ('toplevel_expression -> ASSUME proof','toplevel_expression',2,'p_toplevel_expression_assume','parser.py',196),
  ('proof_annotation -> expression','proof_annotation',1,'p_proof_annotation','parser.py',200),
  ('expression -> lvalue = expression','expression',3,'p_expression_assign','parser.py',204),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parser.py',208),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parser.py',209),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parser.py',210),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parser.py',211),
  ('expression -> expression < expression','expression',3,'p_expression_binop','parser.py',212),
  ('expression -> expression > expression','expression',3,'p_expression_binop','parser.py',213),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',214),
  ('expression -> expression & expression','expression',3,'p_expression_binop','parser.py',215),
  ('expression -> expression | expression','expression',3,'p_expression_binop','parser.py',216),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',220),
  ('expression -> + expression','expression',2,'p_expression_uminus','parser.py',221),
  ('expression -> ! expression','expression',2,'p_expression_uminus','parser.py',222),
  ('arg -> expression','arg',1,'p_arg','parser.py',226),
  ('arg -> IDENT : type','arg',3,'p_arg','parser.py',227),
  ('type -> *','type',1,'p_type','parser.py',234),
  ('type -> < type type_trailer','type',3,'p_type','parser.py',235),
  ('type_trailer -> , type type_trailer','type_trailer',3,'p_type_trailer','parser.py',242),
  ('type_trailer -> >','type_trailer',1,'p_type_trailer','parser.py',243),
  ('arglist -> arg , arglist','arglist',3,'p_arglist','parser.py',250),
  ('arglist -> arg','arglist',1,'p_arglist','parser.py',251),
  ('arglist -> <empty>','arglist',0,'p_arglist','parser.py',252),
  ('expression -> < expression tuple_rest','expression',3,'p_expression_tuple','parser.py',261),
  ('tuple_rest -> , expression tuple_rest','tuple_rest',3,'p_tuple_rest','parser.py',265),
  ('tuple_rest -> >','tuple_rest',1,'p_tuple_rest','parser.py',266),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',273),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','parser.py',277),
  ('expression -> methoddecl_or_call','expression',1,'p_expression_call','parser.py',281),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',285),
  ('lvalue -> IDENT','lvalue',1,'p_lvalue','parser.py',289),
  ('lvalue -> expression . IDENT lvalue_trailer','lvalue',4,'p_lvalue','parser.py',290),
  ('lvalue -> expression [ expression ] lvalue_trailer','lvalue',5,'p_lvalue','parser.py',291),
  ('lvalue_trailer -> . IDENT lvalue_trailer','lvalue_trailer',3,'p_lvalue_trailer','parser.py',300),
  ('lvalue_trailer -> [ expression ] lvalue_trailer','lvalue_trailer',4,'p_lvalue_trailer','parser.py',301),
  ('lvalue_trailer -> ( arglist ) lvalue_trailer','lvalue_trailer',4,'p_lvalue_trailer','parser.py',302),
  ('lvalue_trailer -> <empty>','lvalue_trailer',0,'p_lvalue_trailer','parser.py',303),
  ('methoddecl_or_call -> IDENT ( arglist )','methoddecl_or_call',4,'p_methoddecl_or_call','parser.py',316),
  ('expression -> new_alloc','expression',1,'p_expression_new','parser.py',320),
  ('expression -> method','expression',1,'p_expression_method','parser.py',324),
  ('new_alloc -> NEW ( locallist ) { expression_list }','new_alloc',7,'p_new','parser.py',328),
  ('locallist -> local , locallist','locallist',3,'p_locallist','parser.py',332),
  ('locallist -> local','locallist',1,'p_locallist','parser.py',333),
  ('locallist -> <empty>','locallist',0,'p_locallist','parser.py',334),
  ('local -> IDENT = expression','local',3,'p_local','parser.py',343),
  ('local -> IDENT','local',1,'p_local','parser.py',344),
  ('method -> methoddecl_or_call { expression_list }','method',4,'p_method','parser.py',351),
  ('expression -> IF expression { expression_list }','expression',5,'p_expression_ite','parser.py',356),
  ('expression -> IF expression { expression_list } ELSE { expression_list }','expression',9,'p_expression_ite','parser.py',357),
]
